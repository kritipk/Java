class Solution {
    // calc num of 1xn, 2xn, 3xn where n = 0...length
    // 1xn is length of 1s starting here, 2xn is min of length of 1s starting here and bottom, 3xn is same, keep going down
    // repeat for each num
    public int numSubmat(int[][] matrix) {
        int m = matrix.length, n = matrix[0].length, res = 0;
        for (int i = m - 1; i >= 0; i--) {
            for (int j = n - 2; j >= 0; j--) {
                // matrix stores num of consecutive ones from matrix[i][j] first zero on its right
                matrix[i][j] = matrix[i][j] == 0 ? 0 : matrix[i][j] + matrix[i][j + 1];
            }
        }
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int min = matrix[i][j];
                res += min;
                for (int k = i + 1; k < m; k++) {
                    if (matrix[k][j] == 0) break;
                    min = Math.min(min, matrix[k][j]);
                    res += min;
                }
            }
        }
        return res;
    }
}
