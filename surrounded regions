class Solution {
    int[] parent;
    public void solve(char[][] board) {
       int n = board.length;
       int m = board[0].length;
       // we have n * m elements and one dummy node
       int size = n * m + 1;
       parent = new int[size];
       // initialize the parent array
       for(int i=0;i<size;i++) parent[i] = i;

       // Loop over the board
       for(int i=0;i<n;i++){
           for(int j=0;j<m;j++){
                // if we are in the first, last row or col and 
                // the cell = O, union this cell with the dummy node
                if((j == m - 1 || i == n - 1 || j == 0 || i == 0) 
                    && board[i][j] == 'O'){
                   union(size - 1, i * m + j);
               }
               // if there are any two adjacent Os union them

               if(i < n - 1 && board[i][j] == 'O' && board[i + 1][j] == 'O'){
                   union((i+1)*m + j, i * m+ j);
               }

               if(j < m - 1 && board[i][j] == 'O' && board[i][j + 1] == 'O'){
                   union(i * m + j, i * m + j + 1);
               }
           }
       }
       // Get the parent of the dummy node to compare it with Os parents
       int flag = find(size - 1);
       for(int i=0;i<n;i++){
           for(int j=0;j<m;j++){
               // If they are not the same, this O is surrounded by Xs
               if(board[i][j] == 'O' && find(i * m + j) != flag ) {
                   board[i][j] = 'X';
               }
           }
       }
       return;
    }

    public boolean union(int x, int y){
        int xp = find(x);
        int yp = find(y);
        if(xp == yp) return false;
        parent[yp] = xp;
        return true;
    }

    public int find(int x){
        if(parent[x] != x) parent[x] = find(parent[x]);
        return parent[x];
    }    
}
